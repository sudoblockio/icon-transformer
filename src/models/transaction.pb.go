// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transaction.proto

package models

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Transaction struct {
	Hash                 string   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	LogIndex             int64    `protobuf:"varint,2,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	Type                 string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Method               string   `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	FromAddress          string   `protobuf:"bytes,5,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ToAddress            string   `protobuf:"bytes,6,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	BlockNumber          int64    `protobuf:"varint,7,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	LogCount             int64    `protobuf:"varint,8,opt,name=log_count,json=logCount,proto3" json:"log_count,omitempty"`
	Version              string   `protobuf:"bytes,9,opt,name=version,proto3" json:"version,omitempty"`
	Value                string   `protobuf:"bytes,10,opt,name=value,proto3" json:"value,omitempty"`
	ValueDecimal         float64  `protobuf:"fixed64,11,opt,name=value_decimal,json=valueDecimal,proto3" json:"value_decimal,omitempty"`
	StepLimit            string   `protobuf:"bytes,12,opt,name=step_limit,json=stepLimit,proto3" json:"step_limit,omitempty"`
	Timestamp            int64    `protobuf:"varint,13,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	BlockTimestamp       int64    `protobuf:"varint,14,opt,name=block_timestamp,json=blockTimestamp,proto3" json:"block_timestamp,omitempty"`
	Nid                  string   `protobuf:"bytes,15,opt,name=nid,proto3" json:"nid,omitempty"`
	Nonce                string   `protobuf:"bytes,16,opt,name=nonce,proto3" json:"nonce,omitempty"`
	TransactionIndex     int64    `protobuf:"varint,17,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"`
	BlockHash            string   `protobuf:"bytes,18,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	TransactionFee       string   `protobuf:"bytes,19,opt,name=transaction_fee,json=transactionFee,proto3" json:"transaction_fee,omitempty"`
	Signature            string   `protobuf:"bytes,20,opt,name=signature,proto3" json:"signature,omitempty"`
	DataType             string   `protobuf:"bytes,21,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	Data                 string   `protobuf:"bytes,22,opt,name=data,proto3" json:"data,omitempty"`
	CumulativeStepUsed   string   `protobuf:"bytes,23,opt,name=cumulative_step_used,json=cumulativeStepUsed,proto3" json:"cumulative_step_used,omitempty"`
	StepUsed             string   `protobuf:"bytes,24,opt,name=step_used,json=stepUsed,proto3" json:"step_used,omitempty"`
	StepPrice            string   `protobuf:"bytes,25,opt,name=step_price,json=stepPrice,proto3" json:"step_price,omitempty"`
	ScoreAddress         string   `protobuf:"bytes,26,opt,name=score_address,json=scoreAddress,proto3" json:"score_address,omitempty"`
	LogsBloom            string   `protobuf:"bytes,27,opt,name=logs_bloom,json=logsBloom,proto3" json:"logs_bloom,omitempty"`
	Status               string   `protobuf:"bytes,28,opt,name=status,proto3" json:"status,omitempty"`
	TransactionType      int32    `protobuf:"varint,29,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{0}
}

func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Transaction) GetLogIndex() int64 {
	if m != nil {
		return m.LogIndex
	}
	return 0
}

func (m *Transaction) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Transaction) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Transaction) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *Transaction) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *Transaction) GetBlockNumber() int64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *Transaction) GetLogCount() int64 {
	if m != nil {
		return m.LogCount
	}
	return 0
}

func (m *Transaction) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Transaction) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Transaction) GetValueDecimal() float64 {
	if m != nil {
		return m.ValueDecimal
	}
	return 0
}

func (m *Transaction) GetStepLimit() string {
	if m != nil {
		return m.StepLimit
	}
	return ""
}

func (m *Transaction) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Transaction) GetBlockTimestamp() int64 {
	if m != nil {
		return m.BlockTimestamp
	}
	return 0
}

func (m *Transaction) GetNid() string {
	if m != nil {
		return m.Nid
	}
	return ""
}

func (m *Transaction) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *Transaction) GetTransactionIndex() int64 {
	if m != nil {
		return m.TransactionIndex
	}
	return 0
}

func (m *Transaction) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *Transaction) GetTransactionFee() string {
	if m != nil {
		return m.TransactionFee
	}
	return ""
}

func (m *Transaction) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *Transaction) GetDataType() string {
	if m != nil {
		return m.DataType
	}
	return ""
}

func (m *Transaction) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *Transaction) GetCumulativeStepUsed() string {
	if m != nil {
		return m.CumulativeStepUsed
	}
	return ""
}

func (m *Transaction) GetStepUsed() string {
	if m != nil {
		return m.StepUsed
	}
	return ""
}

func (m *Transaction) GetStepPrice() string {
	if m != nil {
		return m.StepPrice
	}
	return ""
}

func (m *Transaction) GetScoreAddress() string {
	if m != nil {
		return m.ScoreAddress
	}
	return ""
}

func (m *Transaction) GetLogsBloom() string {
	if m != nil {
		return m.LogsBloom
	}
	return ""
}

func (m *Transaction) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Transaction) GetTransactionType() int32 {
	if m != nil {
		return m.TransactionType
	}
	return 0
}

func init() {
	proto.RegisterType((*Transaction)(nil), "models.Transaction")
}

func init() {
	proto.RegisterFile("transaction.proto", fileDescriptor_2cc4e03d2c28c490)
}

var fileDescriptor_2cc4e03d2c28c490 = []byte{
	// 684 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0x5f, 0x6f, 0xd3, 0x3e,
	0x14, 0x55, 0xb6, 0xae, 0x6b, 0x6f, 0xbb, 0x7f, 0xfe, 0xf5, 0x57, 0x9c, 0xae, 0x1d, 0x65, 0x6c,
	0x5a, 0x25, 0xb4, 0x75, 0x12, 0x12, 0x0f, 0x3c, 0xb1, 0x82, 0x18, 0x20, 0x84, 0x90, 0x37, 0x5e,
	0x78, 0x89, 0xd2, 0xc4, 0x4b, 0x23, 0x92, 0x38, 0x8a, 0x9d, 0x69, 0x7c, 0x1e, 0x3e, 0x45, 0xf2,
	0xe9, 0x90, 0xaf, 0xfb, 0x27, 0xeb, 0xc4, 0x9b, 0xcf, 0xb9, 0xc7, 0xc7, 0xd7, 0xd7, 0x27, 0x81,
	0x03, 0x95, 0xb9, 0x89, 0x74, 0x3d, 0x15, 0x8a, 0xe4, 0x22, 0xcd, 0x84, 0x12, 0xa4, 0x1e, 0x0b,
	0x9f, 0x47, 0xb2, 0xf7, 0x2e, 0x08, 0xd5, 0x2c, 0x9f, 0x5e, 0x78, 0x22, 0x1e, 0x87, 0xc9, 0x9d,
	0x98, 0x46, 0xe2, 0x41, 0xa4, 0x3c, 0x19, 0xa3, 0xcc, 0x3b, 0x0f, 0x78, 0x72, 0x1e, 0x88, 0x2c,
	0x36, 0x78, 0x2c, 0x52, 0xed, 0x21, 0xc7, 0x9a, 0x32, 0x4e, 0xc7, 0x7f, 0x9a, 0xd0, 0xba, 0x5d,
	0xf9, 0x93, 0x3e, 0xd4, 0x66, 0xae, 0x9c, 0x51, 0x6b, 0x68, 0x8d, 0x9a, 0x93, 0x46, 0x59, 0xd8,
	0x35, 0xd8, 0x18, 0x59, 0x0c, 0x59, 0x72, 0x0a, 0xcd, 0x48, 0x04, 0x4e, 0x98, 0xf8, 0xfc, 0x81,
	0x6e, 0x0c, 0xad, 0xd1, 0x66, 0x45, 0xd2, 0x88, 0x44, 0xf0, 0x59, 0x57, 0xc8, 0x25, 0xd4, 0xd4,
	0xef, 0x94, 0xd3, 0x4d, 0x34, 0xe9, 0x97, 0x85, 0x4d, 0xa1, 0xcb, 0x3a, 0x95, 0x7b, 0x38, 0xa1,
	0xff, 0xe0, 0x68, 0x0d, 0x43, 0x25, 0x79, 0x03, 0xf5, 0x98, 0xab, 0x99, 0xf0, 0x69, 0x0d, 0xf7,
	0x1c, 0x95, 0x85, 0xdd, 0x03, 0xca, 0xba, 0xeb, 0x7b, 0x8c, 0x8a, 0xcd, 0xd5, 0xe4, 0x1a, 0xda,
	0x77, 0x99, 0x88, 0x1d, 0xd7, 0xf7, 0x33, 0x2e, 0x25, 0xdd, 0xc2, 0xdd, 0x27, 0x65, 0x61, 0x0f,
	0xe1, 0x88, 0xf5, 0xd7, 0x77, 0x57, 0xb5, 0xac, 0xa5, 0xd1, 0x95, 0x01, 0xe4, 0x0a, 0x40, 0x89,
	0xa5, 0x4d, 0x1d, 0x6d, 0x8e, 0xcb, 0xc2, 0x3e, 0x82, 0x3e, 0xeb, 0x3d, 0x69, 0x7c, 0xa9, 0x64,
	0x4d, 0x25, 0x16, 0x16, 0xd7, 0xd0, 0x9e, 0x46, 0xc2, 0xfb, 0xe5, 0x24, 0x79, 0x3c, 0xe5, 0x19,
	0xdd, 0xc6, 0xf9, 0xfc, 0xb3, 0x97, 0xaa, 0x96, 0xb5, 0x10, 0x7d, 0x43, 0x40, 0x0e, 0xcd, 0x94,
	0x3d, 0x91, 0x27, 0x8a, 0x36, 0xb4, 0x0b, 0xce, 0xf6, 0xbd, 0xc6, 0x84, 0xc2, 0xf6, 0x3d, 0xcf,
	0x64, 0x28, 0x12, 0xda, 0xd4, 0x5d, 0xb2, 0x05, 0x24, 0x1d, 0xd8, 0xba, 0x77, 0xa3, 0x9c, 0x53,
	0x40, 0xde, 0x00, 0xf2, 0x12, 0x76, 0x70, 0xe1, 0xf8, 0xdc, 0x0b, 0x63, 0x37, 0xa2, 0xad, 0xa1,
	0x35, 0xb2, 0x58, 0x1b, 0xc9, 0x0f, 0x86, 0x23, 0x03, 0x00, 0xa9, 0x78, 0xea, 0x44, 0x61, 0x1c,
	0x2a, 0xda, 0xc6, 0xfd, 0x4d, 0xcd, 0x7c, 0xd5, 0x04, 0xe9, 0x43, 0x53, 0x85, 0x31, 0x97, 0xca,
	0x8d, 0x53, 0xba, 0x83, 0x0d, 0xad, 0x08, 0x72, 0x06, 0x7b, 0xe6, 0x2e, 0x2b, 0xcd, 0x2e, 0x6a,
	0x76, 0x91, 0xbe, 0x5d, 0x0a, 0xf7, 0x61, 0x33, 0x09, 0x7d, 0xba, 0x87, 0xf6, 0x7a, 0xa9, 0x5b,
	0x4e, 0x44, 0xe2, 0x71, 0xba, 0x6f, 0x5a, 0x46, 0x40, 0x5e, 0x3d, 0x8a, 0xfc, 0x3c, 0x6d, 0x07,
	0x68, 0xb9, 0x5f, 0x29, 0x98, 0xac, 0x0d, 0x00, 0xcc, 0xe9, 0x18, 0x5b, 0x62, 0x5a, 0x47, 0xe6,
	0x93, 0x4e, 0xec, 0x19, 0xec, 0x55, 0xbd, 0xee, 0x38, 0xa7, 0xff, 0xa1, 0x66, 0xb7, 0x42, 0x7f,
	0xe4, 0x5c, 0xdf, 0x51, 0x86, 0x41, 0xe2, 0xaa, 0x3c, 0xe3, 0xb4, 0x33, 0x9f, 0xc0, 0x82, 0xd0,
	0x4f, 0xe2, 0xbb, 0xca, 0xc5, 0xc8, 0xd2, 0xff, 0xb1, 0xda, 0xd0, 0xc4, 0xad, 0x0e, 0x2f, 0x81,
	0x9a, 0x5e, 0xd3, 0x2e, 0xf2, 0xb8, 0x26, 0x97, 0xd0, 0xf1, 0xf2, 0x38, 0x8f, 0x5c, 0x15, 0xde,
	0x73, 0x07, 0x87, 0x9b, 0x4b, 0xee, 0xd3, 0x67, 0xa8, 0x21, 0xab, 0xda, 0x8d, 0xe2, 0xe9, 0x0f,
	0xc9, 0x7d, 0x7d, 0xc4, 0x4a, 0x46, 0xcd, 0x11, 0x72, 0x51, 0x5c, 0x3c, 0x50, 0x9a, 0x85, 0x1e,
	0xa7, 0xf6, 0xea, 0x81, 0xbe, 0x6b, 0x82, 0x7c, 0x81, 0x1d, 0xe9, 0x89, 0x8c, 0x2f, 0x03, 0xdc,
	0xc3, 0x00, 0x9f, 0x96, 0x85, 0xfd, 0x02, 0x9e, 0xb3, 0xc1, 0x7a, 0xf6, 0x1e, 0x89, 0x59, 0x1b,
	0xe1, 0x22, 0xc6, 0x03, 0x80, 0x48, 0x04, 0x52, 0xe7, 0x53, 0xc4, 0xf4, 0xd0, 0x1c, 0xa5, 0x99,
	0x89, 0x26, 0x48, 0x17, 0xea, 0x52, 0xb9, 0x2a, 0x97, 0xb4, 0x8f, 0xa5, 0x39, 0x22, 0x37, 0x50,
	0x7d, 0x1b, 0x33, 0xa8, 0xc1, 0xd0, 0x1a, 0x6d, 0x4d, 0x46, 0x65, 0x61, 0x9f, 0xc0, 0x31, 0x1b,
	0x3e, 0xf9, 0x8c, 0xd6, 0xf4, 0xac, 0xfa, 0x54, 0x7a, 0xb2, 0x6f, 0xeb, 0x65, 0x61, 0x6f, 0x34,
	0xac, 0x09, 0xfc, 0x6c, 0x5c, 0x8c, 0xcd, 0x3f, 0x6f, 0x5a, 0xc7, 0x1f, 0xd7, 0xeb, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x4c, 0x94, 0x13, 0x2e, 0x17, 0x05, 0x00, 0x00,
}
