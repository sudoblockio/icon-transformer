package models

import (
	context "context"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	gorm "gorm.io/gorm"
)

type TokenAddressORM struct {
	Address              string  `gorm:"primaryKey"`
	Balance              float64 `gorm:"index:token_address_idx_balance"`
	TokenContractAddress string  `gorm:"primaryKey;index:token_address_idx_token_contract_address"`
}

// TableName overrides the default tablename generated by GORM
func (TokenAddressORM) TableName() string {
	return "token_addresses"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *TokenAddress) ToORM(ctx context.Context) (TokenAddressORM, error) {
	to := TokenAddressORM{}
	var err error
	if prehook, ok := interface{}(m).(TokenAddressWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Address = m.Address
	to.TokenContractAddress = m.TokenContractAddress
	to.Balance = m.Balance
	if posthook, ok := interface{}(m).(TokenAddressWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *TokenAddressORM) ToPB(ctx context.Context) (TokenAddress, error) {
	to := TokenAddress{}
	var err error
	if prehook, ok := interface{}(m).(TokenAddressWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Address = m.Address
	to.TokenContractAddress = m.TokenContractAddress
	to.Balance = m.Balance
	if posthook, ok := interface{}(m).(TokenAddressWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type TokenAddress the arg will be the target, the caller the one being converted from

// TokenAddressBeforeToORM called before default ToORM code
type TokenAddressWithBeforeToORM interface {
	BeforeToORM(context.Context, *TokenAddressORM) error
}

// TokenAddressAfterToORM called after default ToORM code
type TokenAddressWithAfterToORM interface {
	AfterToORM(context.Context, *TokenAddressORM) error
}

// TokenAddressBeforeToPB called before default ToPB code
type TokenAddressWithBeforeToPB interface {
	BeforeToPB(context.Context, *TokenAddress) error
}

// TokenAddressAfterToPB called after default ToPB code
type TokenAddressWithAfterToPB interface {
	AfterToPB(context.Context, *TokenAddress) error
}

// DefaultCreateTokenAddress executes a basic gorm create call
func DefaultCreateTokenAddress(ctx context.Context, in *TokenAddress, db *gorm.DB) (*TokenAddress, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TokenAddressORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TokenAddressORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type TokenAddressORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TokenAddressORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadTokenAddress(ctx context.Context, in *TokenAddress, db *gorm.DB) (*TokenAddress, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Address == "" {
		return nil, errors.EmptyIdError
	}
	if ormObj.TokenContractAddress == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TokenAddressORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(TokenAddressORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := TokenAddressORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(TokenAddressORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type TokenAddressORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TokenAddressORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TokenAddressORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteTokenAddress(ctx context.Context, in *TokenAddress, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Address == "" {
		return errors.EmptyIdError
	}
	if ormObj.TokenContractAddress == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TokenAddressORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&TokenAddressORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(TokenAddressORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type TokenAddressORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TokenAddressORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

// DefaultApplyFieldMaskTokenAddress patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskTokenAddress(ctx context.Context, patchee *TokenAddress, patcher *TokenAddress, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*TokenAddress, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Address" {
			patchee.Address = patcher.Address
			continue
		}
		if f == prefix+"TokenContractAddress" {
			patchee.TokenContractAddress = patcher.TokenContractAddress
			continue
		}
		if f == prefix+"Balance" {
			patchee.Balance = patcher.Balance
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListTokenAddress executes a gorm list call
func DefaultListTokenAddress(ctx context.Context, db *gorm.DB) ([]*TokenAddress, error) {
	in := TokenAddress{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TokenAddressORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(TokenAddressORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("address, token_contract_address")
	ormResponse := []TokenAddressORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TokenAddressORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*TokenAddress{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type TokenAddressORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TokenAddressORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TokenAddressORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]TokenAddressORM) error
}
