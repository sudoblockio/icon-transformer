// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: log.proto

package models

import (
	context "context"
	fmt "fmt"
	
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	math "math"

	gorm2 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors1 "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm1 "github.com/jinzhu/gorm"
	field_mask1 "google.golang.org/genproto/protobuf/field_mask"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = math.Inf

type LogORM struct {
	Address         string `gorm:"index:log_idx_address"`
	BlockNumber     int64  `gorm:"index:log_idx_block_number"`
	BlockTimestamp  int64
	Data            string
	Indexed         string
	LogIndex        int64  `gorm:"primary_key"`
	Method          string `gorm:"index:log_idx_method"`
	TransactionHash string `gorm:"primary_key;index:log_idx_transaction_hash"`
}

// TableName overrides the default tablename generated by GORM
func (LogORM) TableName() string {
	return "logs"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Log) ToORM(ctx context.Context) (LogORM, error) {
	to := LogORM{}
	var err error
	if prehook, ok := interface{}(m).(LogWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.TransactionHash = m.TransactionHash
	to.LogIndex = m.LogIndex
	to.Address = m.Address
	to.BlockNumber = m.BlockNumber
	to.Method = m.Method
	to.Data = m.Data
	to.Indexed = m.Indexed
	to.BlockTimestamp = m.BlockTimestamp
	if posthook, ok := interface{}(m).(LogWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *LogORM) ToPB(ctx context.Context) (Log, error) {
	to := Log{}
	var err error
	if prehook, ok := interface{}(m).(LogWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.TransactionHash = m.TransactionHash
	to.LogIndex = m.LogIndex
	to.Address = m.Address
	to.BlockNumber = m.BlockNumber
	to.Method = m.Method
	to.Data = m.Data
	to.Indexed = m.Indexed
	to.BlockTimestamp = m.BlockTimestamp
	if posthook, ok := interface{}(m).(LogWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Log the arg will be the target, the caller the one being converted from

// LogBeforeToORM called before default ToORM code
type LogWithBeforeToORM interface {
	BeforeToORM(context.Context, *LogORM) error
}

// LogAfterToORM called after default ToORM code
type LogWithAfterToORM interface {
	AfterToORM(context.Context, *LogORM) error
}

// LogBeforeToPB called before default ToPB code
type LogWithBeforeToPB interface {
	BeforeToPB(context.Context, *Log) error
}

// LogAfterToPB called after default ToPB code
type LogWithAfterToPB interface {
	AfterToPB(context.Context, *Log) error
}

// DefaultCreateLog executes a basic gorm create call
func DefaultCreateLog(ctx context.Context, in *Log, db *gorm1.DB) (*Log, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(LogORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(LogORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type LogORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type LogORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultApplyFieldMaskLog patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskLog(ctx context.Context, patchee *Log, patcher *Log, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*Log, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"TransactionHash" {
			patchee.TransactionHash = patcher.TransactionHash
			continue
		}
		if f == prefix+"LogIndex" {
			patchee.LogIndex = patcher.LogIndex
			continue
		}
		if f == prefix+"Address" {
			patchee.Address = patcher.Address
			continue
		}
		if f == prefix+"BlockNumber" {
			patchee.BlockNumber = patcher.BlockNumber
			continue
		}
		if f == prefix+"Method" {
			patchee.Method = patcher.Method
			continue
		}
		if f == prefix+"Data" {
			patchee.Data = patcher.Data
			continue
		}
		if f == prefix+"Indexed" {
			patchee.Indexed = patcher.Indexed
			continue
		}
		if f == prefix+"BlockTimestamp" {
			patchee.BlockTimestamp = patcher.BlockTimestamp
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListLog executes a gorm list call
func DefaultListLog(ctx context.Context, db *gorm1.DB) ([]*Log, error) {
	in := Log{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(LogORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &LogORM{}, &Log{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(LogORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("transaction_hash")
	ormResponse := []LogORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(LogORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Log{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type LogORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type LogORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type LogORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]LogORM) error
}
