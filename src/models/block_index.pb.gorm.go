package models

import (
	context "context"
	fmt "fmt"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	gorm "gorm.io/gorm"
)

type BlockIndexORM struct {
	Number int64 `gorm:"primaryKey"`
}

// TableName overrides the default tablename generated by GORM
func (BlockIndexORM) TableName() string {
	return "block_indices"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *BlockIndex) ToORM(ctx context.Context) (BlockIndexORM, error) {
	to := BlockIndexORM{}
	var err error
	if prehook, ok := interface{}(m).(BlockIndexWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Number = m.Number
	if posthook, ok := interface{}(m).(BlockIndexWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *BlockIndexORM) ToPB(ctx context.Context) (BlockIndex, error) {
	to := BlockIndex{}
	var err error
	if prehook, ok := interface{}(m).(BlockIndexWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Number = m.Number
	if posthook, ok := interface{}(m).(BlockIndexWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type BlockIndex the arg will be the target, the caller the one being converted from

// BlockIndexBeforeToORM called before default ToORM code
type BlockIndexWithBeforeToORM interface {
	BeforeToORM(context.Context, *BlockIndexORM) error
}

// BlockIndexAfterToORM called after default ToORM code
type BlockIndexWithAfterToORM interface {
	AfterToORM(context.Context, *BlockIndexORM) error
}

// BlockIndexBeforeToPB called before default ToPB code
type BlockIndexWithBeforeToPB interface {
	BeforeToPB(context.Context, *BlockIndex) error
}

// BlockIndexAfterToPB called after default ToPB code
type BlockIndexWithAfterToPB interface {
	AfterToPB(context.Context, *BlockIndex) error
}

// DefaultCreateBlockIndex executes a basic gorm create call
func DefaultCreateBlockIndex(ctx context.Context, in *BlockIndex, db *gorm.DB) (*BlockIndex, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BlockIndexORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BlockIndexORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type BlockIndexORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type BlockIndexORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadBlockIndex(ctx context.Context, in *BlockIndex, db *gorm.DB) (*BlockIndex, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Number == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(BlockIndexORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(BlockIndexORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := BlockIndexORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(BlockIndexORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type BlockIndexORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type BlockIndexORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type BlockIndexORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteBlockIndex(ctx context.Context, in *BlockIndex, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Number == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(BlockIndexORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&BlockIndexORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(BlockIndexORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type BlockIndexORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type BlockIndexORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteBlockIndexSet(ctx context.Context, in []*BlockIndex, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []int64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Number == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Number)
	}
	if hook, ok := (interface{}(&BlockIndexORM{})).(BlockIndexORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("number in (?)", keys).Delete(&BlockIndexORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&BlockIndexORM{})).(BlockIndexORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type BlockIndexORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*BlockIndex, *gorm.DB) (*gorm.DB, error)
}
type BlockIndexORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*BlockIndex, *gorm.DB) error
}

// DefaultStrictUpdateBlockIndex clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateBlockIndex(ctx context.Context, in *BlockIndex, db *gorm.DB) (*BlockIndex, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateBlockIndex")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &BlockIndexORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("number=?", ormObj.Number).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(BlockIndexORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(BlockIndexORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BlockIndexORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type BlockIndexORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type BlockIndexORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type BlockIndexORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchBlockIndex executes a basic gorm update call with patch behavior
func DefaultPatchBlockIndex(ctx context.Context, in *BlockIndex, updateMask *field_mask.FieldMask, db *gorm.DB) (*BlockIndex, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj BlockIndex
	var err error
	if hook, ok := interface{}(&pbObj).(BlockIndexWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&pbObj).(BlockIndexWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskBlockIndex(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(BlockIndexWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateBlockIndex(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(BlockIndexWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type BlockIndexWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *BlockIndex, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type BlockIndexWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *BlockIndex, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type BlockIndexWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *BlockIndex, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type BlockIndexWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *BlockIndex, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetBlockIndex executes a bulk gorm update call with patch behavior
func DefaultPatchSetBlockIndex(ctx context.Context, objects []*BlockIndex, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*BlockIndex, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*BlockIndex, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchBlockIndex(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskBlockIndex patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskBlockIndex(ctx context.Context, patchee *BlockIndex, patcher *BlockIndex, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*BlockIndex, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Number" {
			patchee.Number = patcher.Number
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListBlockIndex executes a gorm list call
func DefaultListBlockIndex(ctx context.Context, db *gorm.DB) ([]*BlockIndex, error) {
	in := BlockIndex{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BlockIndexORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(BlockIndexORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("number")
	ormResponse := []BlockIndexORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BlockIndexORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*BlockIndex{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type BlockIndexORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type BlockIndexORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type BlockIndexORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]BlockIndexORM) error
}
