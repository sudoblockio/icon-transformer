// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: transaction_create_score.proto

package models

import (
	context "context"
	fmt "fmt"
	
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	math "math"

	gorm2 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors1 "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm1 "github.com/jinzhu/gorm"
	field_mask1 "google.golang.org/genproto/protobuf/field_mask"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = math.Inf

type TransactionCreateScoreORM struct {
	AcceptTransactionHash   string
	CreationTransactionHash string `gorm:"primary_key"`
	RejectTransactionHash   string
}

// TableName overrides the default tablename generated by GORM
func (TransactionCreateScoreORM) TableName() string {
	return "transaction_create_scores"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *TransactionCreateScore) ToORM(ctx context.Context) (TransactionCreateScoreORM, error) {
	to := TransactionCreateScoreORM{}
	var err error
	if prehook, ok := interface{}(m).(TransactionCreateScoreWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.CreationTransactionHash = m.CreationTransactionHash
	to.AcceptTransactionHash = m.AcceptTransactionHash
	to.RejectTransactionHash = m.RejectTransactionHash
	if posthook, ok := interface{}(m).(TransactionCreateScoreWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *TransactionCreateScoreORM) ToPB(ctx context.Context) (TransactionCreateScore, error) {
	to := TransactionCreateScore{}
	var err error
	if prehook, ok := interface{}(m).(TransactionCreateScoreWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.CreationTransactionHash = m.CreationTransactionHash
	to.AcceptTransactionHash = m.AcceptTransactionHash
	to.RejectTransactionHash = m.RejectTransactionHash
	if posthook, ok := interface{}(m).(TransactionCreateScoreWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type TransactionCreateScore the arg will be the target, the caller the one being converted from

// TransactionCreateScoreBeforeToORM called before default ToORM code
type TransactionCreateScoreWithBeforeToORM interface {
	BeforeToORM(context.Context, *TransactionCreateScoreORM) error
}

// TransactionCreateScoreAfterToORM called after default ToORM code
type TransactionCreateScoreWithAfterToORM interface {
	AfterToORM(context.Context, *TransactionCreateScoreORM) error
}

// TransactionCreateScoreBeforeToPB called before default ToPB code
type TransactionCreateScoreWithBeforeToPB interface {
	BeforeToPB(context.Context, *TransactionCreateScore) error
}

// TransactionCreateScoreAfterToPB called after default ToPB code
type TransactionCreateScoreWithAfterToPB interface {
	AfterToPB(context.Context, *TransactionCreateScore) error
}

// DefaultCreateTransactionCreateScore executes a basic gorm create call
func DefaultCreateTransactionCreateScore(ctx context.Context, in *TransactionCreateScore, db *gorm1.DB) (*TransactionCreateScore, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TransactionCreateScoreORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TransactionCreateScoreORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type TransactionCreateScoreORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type TransactionCreateScoreORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultApplyFieldMaskTransactionCreateScore patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskTransactionCreateScore(ctx context.Context, patchee *TransactionCreateScore, patcher *TransactionCreateScore, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*TransactionCreateScore, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"CreationTransactionHash" {
			patchee.CreationTransactionHash = patcher.CreationTransactionHash
			continue
		}
		if f == prefix+"AcceptTransactionHash" {
			patchee.AcceptTransactionHash = patcher.AcceptTransactionHash
			continue
		}
		if f == prefix+"RejectTransactionHash" {
			patchee.RejectTransactionHash = patcher.RejectTransactionHash
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListTransactionCreateScore executes a gorm list call
func DefaultListTransactionCreateScore(ctx context.Context, db *gorm1.DB) ([]*TransactionCreateScore, error) {
	in := TransactionCreateScore{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TransactionCreateScoreORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &TransactionCreateScoreORM{}, &TransactionCreateScore{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TransactionCreateScoreORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("creation_transaction_hash")
	ormResponse := []TransactionCreateScoreORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TransactionCreateScoreORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*TransactionCreateScore{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type TransactionCreateScoreORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type TransactionCreateScoreORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type TransactionCreateScoreORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]TransactionCreateScoreORM) error
}
