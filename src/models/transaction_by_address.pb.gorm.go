package models

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm "github.com/jinzhu/gorm"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

type TransactionByAddressORM struct {
	Address         string `gorm:"primary_key"`
	BlockNumber     int64  `gorm:"index:transaction_by_address_idx_block_number"`
	TransactionHash string `gorm:"primary_key"`
}

// TableName overrides the default tablename generated by GORM
func (TransactionByAddressORM) TableName() string {
	return "transaction_by_addresses"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *TransactionByAddress) ToORM(ctx context.Context) (TransactionByAddressORM, error) {
	to := TransactionByAddressORM{}
	var err error
	if prehook, ok := interface{}(m).(TransactionByAddressWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.TransactionHash = m.TransactionHash
	to.Address = m.Address
	to.BlockNumber = m.BlockNumber
	if posthook, ok := interface{}(m).(TransactionByAddressWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *TransactionByAddressORM) ToPB(ctx context.Context) (TransactionByAddress, error) {
	to := TransactionByAddress{}
	var err error
	if prehook, ok := interface{}(m).(TransactionByAddressWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.TransactionHash = m.TransactionHash
	to.Address = m.Address
	to.BlockNumber = m.BlockNumber
	if posthook, ok := interface{}(m).(TransactionByAddressWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type TransactionByAddress the arg will be the target, the caller the one being converted from

// TransactionByAddressBeforeToORM called before default ToORM code
type TransactionByAddressWithBeforeToORM interface {
	BeforeToORM(context.Context, *TransactionByAddressORM) error
}

// TransactionByAddressAfterToORM called after default ToORM code
type TransactionByAddressWithAfterToORM interface {
	AfterToORM(context.Context, *TransactionByAddressORM) error
}

// TransactionByAddressBeforeToPB called before default ToPB code
type TransactionByAddressWithBeforeToPB interface {
	BeforeToPB(context.Context, *TransactionByAddress) error
}

// TransactionByAddressAfterToPB called after default ToPB code
type TransactionByAddressWithAfterToPB interface {
	AfterToPB(context.Context, *TransactionByAddress) error
}

// DefaultCreateTransactionByAddress executes a basic gorm create call
func DefaultCreateTransactionByAddress(ctx context.Context, in *TransactionByAddress, db *gorm.DB) (*TransactionByAddress, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TransactionByAddressORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TransactionByAddressORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type TransactionByAddressORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TransactionByAddressORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadTransactionByAddress(ctx context.Context, in *TransactionByAddress, db *gorm.DB) (*TransactionByAddress, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.TransactionHash == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TransactionByAddressORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &TransactionByAddressORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TransactionByAddressORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := TransactionByAddressORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(TransactionByAddressORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type TransactionByAddressORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TransactionByAddressORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TransactionByAddressORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteTransactionByAddress(ctx context.Context, in *TransactionByAddress, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.TransactionHash == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TransactionByAddressORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&TransactionByAddressORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(TransactionByAddressORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type TransactionByAddressORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TransactionByAddressORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteTransactionByAddressSet(ctx context.Context, in []*TransactionByAddress, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.TransactionHash == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.TransactionHash)
	}
	if hook, ok := (interface{}(&TransactionByAddressORM{})).(TransactionByAddressORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("transaction_hash in (?)", keys).Delete(&TransactionByAddressORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&TransactionByAddressORM{})).(TransactionByAddressORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type TransactionByAddressORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*TransactionByAddress, *gorm.DB) (*gorm.DB, error)
}
type TransactionByAddressORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*TransactionByAddress, *gorm.DB) error
}

// DefaultStrictUpdateTransactionByAddress clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateTransactionByAddress(ctx context.Context, in *TransactionByAddress, db *gorm.DB) (*TransactionByAddress, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateTransactionByAddress")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &TransactionByAddressORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("transaction_hash=?", ormObj.TransactionHash).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(TransactionByAddressORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(TransactionByAddressORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TransactionByAddressORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type TransactionByAddressORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TransactionByAddressORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TransactionByAddressORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchTransactionByAddress executes a basic gorm update call with patch behavior
func DefaultPatchTransactionByAddress(ctx context.Context, in *TransactionByAddress, updateMask *field_mask.FieldMask, db *gorm.DB) (*TransactionByAddress, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj TransactionByAddress
	var err error
	if hook, ok := interface{}(&pbObj).(TransactionByAddressWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&pbObj).(TransactionByAddressWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskTransactionByAddress(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(TransactionByAddressWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateTransactionByAddress(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(TransactionByAddressWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type TransactionByAddressWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *TransactionByAddress, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TransactionByAddressWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *TransactionByAddress, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TransactionByAddressWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *TransactionByAddress, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TransactionByAddressWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *TransactionByAddress, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetTransactionByAddress executes a bulk gorm update call with patch behavior
func DefaultPatchSetTransactionByAddress(ctx context.Context, objects []*TransactionByAddress, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*TransactionByAddress, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*TransactionByAddress, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchTransactionByAddress(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskTransactionByAddress patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskTransactionByAddress(ctx context.Context, patchee *TransactionByAddress, patcher *TransactionByAddress, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*TransactionByAddress, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"TransactionHash" {
			patchee.TransactionHash = patcher.TransactionHash
			continue
		}
		if f == prefix+"Address" {
			patchee.Address = patcher.Address
			continue
		}
		if f == prefix+"BlockNumber" {
			patchee.BlockNumber = patcher.BlockNumber
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListTransactionByAddress executes a gorm list call
func DefaultListTransactionByAddress(ctx context.Context, db *gorm.DB) ([]*TransactionByAddress, error) {
	in := TransactionByAddress{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TransactionByAddressORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &TransactionByAddressORM{}, &TransactionByAddress{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TransactionByAddressORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("address")
	ormResponse := []TransactionByAddressORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TransactionByAddressORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*TransactionByAddress{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type TransactionByAddressORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TransactionByAddressORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TransactionByAddressORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]TransactionByAddressORM) error
}
