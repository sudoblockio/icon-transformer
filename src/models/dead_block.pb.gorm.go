package models

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm "github.com/jinzhu/gorm"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

type DeadBlockORM struct {
	Key       string
	Offset    int64  `gorm:"primary_key"`
	Partition int64  `gorm:"primary_key"`
	Topic     string `gorm:"primary_key"`
	Value     string
}

// TableName overrides the default tablename generated by GORM
func (DeadBlockORM) TableName() string {
	return "dead_blocks"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *DeadBlock) ToORM(ctx context.Context) (DeadBlockORM, error) {
	to := DeadBlockORM{}
	var err error
	if prehook, ok := interface{}(m).(DeadBlockWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Topic = m.Topic
	to.Partition = m.Partition
	to.Offset = m.Offset
	to.Key = m.Key
	to.Value = m.Value
	if posthook, ok := interface{}(m).(DeadBlockWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *DeadBlockORM) ToPB(ctx context.Context) (DeadBlock, error) {
	to := DeadBlock{}
	var err error
	if prehook, ok := interface{}(m).(DeadBlockWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Topic = m.Topic
	to.Partition = m.Partition
	to.Offset = m.Offset
	to.Key = m.Key
	to.Value = m.Value
	if posthook, ok := interface{}(m).(DeadBlockWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type DeadBlock the arg will be the target, the caller the one being converted from

// DeadBlockBeforeToORM called before default ToORM code
type DeadBlockWithBeforeToORM interface {
	BeforeToORM(context.Context, *DeadBlockORM) error
}

// DeadBlockAfterToORM called after default ToORM code
type DeadBlockWithAfterToORM interface {
	AfterToORM(context.Context, *DeadBlockORM) error
}

// DeadBlockBeforeToPB called before default ToPB code
type DeadBlockWithBeforeToPB interface {
	BeforeToPB(context.Context, *DeadBlock) error
}

// DeadBlockAfterToPB called after default ToPB code
type DeadBlockWithAfterToPB interface {
	AfterToPB(context.Context, *DeadBlock) error
}

// DefaultCreateDeadBlock executes a basic gorm create call
func DefaultCreateDeadBlock(ctx context.Context, in *DeadBlock, db *gorm.DB) (*DeadBlock, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DeadBlockORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DeadBlockORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type DeadBlockORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DeadBlockORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadDeadBlock(ctx context.Context, in *DeadBlock, db *gorm.DB) (*DeadBlock, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Offset == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(DeadBlockORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &DeadBlockORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DeadBlockORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := DeadBlockORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(DeadBlockORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type DeadBlockORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DeadBlockORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DeadBlockORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteDeadBlock(ctx context.Context, in *DeadBlock, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Topic == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(DeadBlockORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&DeadBlockORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(DeadBlockORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type DeadBlockORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DeadBlockORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteDeadBlockSet(ctx context.Context, in []*DeadBlock, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []int64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Partition == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Partition)
	}
	if hook, ok := (interface{}(&DeadBlockORM{})).(DeadBlockORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("partition in (?)", keys).Delete(&DeadBlockORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&DeadBlockORM{})).(DeadBlockORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type DeadBlockORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*DeadBlock, *gorm.DB) (*gorm.DB, error)
}
type DeadBlockORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*DeadBlock, *gorm.DB) error
}

// DefaultStrictUpdateDeadBlock clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateDeadBlock(ctx context.Context, in *DeadBlock, db *gorm.DB) (*DeadBlock, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateDeadBlock")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &DeadBlockORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("topic=?", ormObj.Topic).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(DeadBlockORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(DeadBlockORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DeadBlockORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type DeadBlockORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DeadBlockORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DeadBlockORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchDeadBlock executes a basic gorm update call with patch behavior
func DefaultPatchDeadBlock(ctx context.Context, in *DeadBlock, updateMask *field_mask.FieldMask, db *gorm.DB) (*DeadBlock, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj DeadBlock
	var err error
	if hook, ok := interface{}(&pbObj).(DeadBlockWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&pbObj).(DeadBlockWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskDeadBlock(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(DeadBlockWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateDeadBlock(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(DeadBlockWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type DeadBlockWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *DeadBlock, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type DeadBlockWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *DeadBlock, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type DeadBlockWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *DeadBlock, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type DeadBlockWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *DeadBlock, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetDeadBlock executes a bulk gorm update call with patch behavior
func DefaultPatchSetDeadBlock(ctx context.Context, objects []*DeadBlock, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*DeadBlock, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*DeadBlock, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchDeadBlock(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskDeadBlock patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskDeadBlock(ctx context.Context, patchee *DeadBlock, patcher *DeadBlock, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*DeadBlock, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Topic" {
			patchee.Topic = patcher.Topic
			continue
		}
		if f == prefix+"Partition" {
			patchee.Partition = patcher.Partition
			continue
		}
		if f == prefix+"Offset" {
			patchee.Offset = patcher.Offset
			continue
		}
		if f == prefix+"Key" {
			patchee.Key = patcher.Key
			continue
		}
		if f == prefix+"Value" {
			patchee.Value = patcher.Value
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListDeadBlock executes a gorm list call
func DefaultListDeadBlock(ctx context.Context, db *gorm.DB) ([]*DeadBlock, error) {
	in := DeadBlock{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DeadBlockORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &DeadBlockORM{}, &DeadBlock{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DeadBlockORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("topic")
	ormResponse := []DeadBlockORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DeadBlockORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*DeadBlock{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type DeadBlockORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DeadBlockORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DeadBlockORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]DeadBlockORM) error
}
