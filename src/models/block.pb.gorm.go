package models

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm "github.com/jinzhu/gorm"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

type BlockORM struct {
	FailedTransactionCount    int64
	Hash                      string
	InternalTransactionAmount string
	InternalTransactionCount  int64
	LogCount                  int64
	MerkleRootHash            string
	Number                    int64 `gorm:"primary_key"`
	ParentHash                string
	PeerId                    string `gorm:"index:block_idx_peer_id"`
	Signature                 string
	Timestamp                 int64 `gorm:"index:block_idx_timestamp"`
	TransactionAmount         string
	TransactionCount          int64
	TransactionFees           string
	Version                   string
}

// TableName overrides the default tablename generated by GORM
func (BlockORM) TableName() string {
	return "blocks"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Block) ToORM(ctx context.Context) (BlockORM, error) {
	to := BlockORM{}
	var err error
	if prehook, ok := interface{}(m).(BlockWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Number = m.Number
	to.PeerId = m.PeerId
	to.Signature = m.Signature
	to.Version = m.Version
	to.MerkleRootHash = m.MerkleRootHash
	to.Hash = m.Hash
	to.ParentHash = m.ParentHash
	to.Timestamp = m.Timestamp
	to.TransactionCount = m.TransactionCount
	to.LogCount = m.LogCount
	to.TransactionAmount = m.TransactionAmount
	to.TransactionFees = m.TransactionFees
	to.FailedTransactionCount = m.FailedTransactionCount
	to.InternalTransactionCount = m.InternalTransactionCount
	to.InternalTransactionAmount = m.InternalTransactionAmount
	if posthook, ok := interface{}(m).(BlockWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *BlockORM) ToPB(ctx context.Context) (Block, error) {
	to := Block{}
	var err error
	if prehook, ok := interface{}(m).(BlockWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Number = m.Number
	to.PeerId = m.PeerId
	to.Signature = m.Signature
	to.Version = m.Version
	to.MerkleRootHash = m.MerkleRootHash
	to.Hash = m.Hash
	to.ParentHash = m.ParentHash
	to.Timestamp = m.Timestamp
	to.TransactionCount = m.TransactionCount
	to.LogCount = m.LogCount
	to.TransactionAmount = m.TransactionAmount
	to.TransactionFees = m.TransactionFees
	to.FailedTransactionCount = m.FailedTransactionCount
	to.InternalTransactionCount = m.InternalTransactionCount
	to.InternalTransactionAmount = m.InternalTransactionAmount
	if posthook, ok := interface{}(m).(BlockWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Block the arg will be the target, the caller the one being converted from

// BlockBeforeToORM called before default ToORM code
type BlockWithBeforeToORM interface {
	BeforeToORM(context.Context, *BlockORM) error
}

// BlockAfterToORM called after default ToORM code
type BlockWithAfterToORM interface {
	AfterToORM(context.Context, *BlockORM) error
}

// BlockBeforeToPB called before default ToPB code
type BlockWithBeforeToPB interface {
	BeforeToPB(context.Context, *Block) error
}

// BlockAfterToPB called after default ToPB code
type BlockWithAfterToPB interface {
	AfterToPB(context.Context, *Block) error
}

// DefaultCreateBlock executes a basic gorm create call
func DefaultCreateBlock(ctx context.Context, in *Block, db *gorm.DB) (*Block, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BlockORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BlockORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type BlockORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type BlockORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadBlock(ctx context.Context, in *Block, db *gorm.DB) (*Block, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Number == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(BlockORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &BlockORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BlockORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := BlockORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(BlockORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type BlockORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type BlockORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type BlockORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteBlock(ctx context.Context, in *Block, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Number == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(BlockORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&BlockORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(BlockORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type BlockORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type BlockORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteBlockSet(ctx context.Context, in []*Block, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []int64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Number == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Number)
	}
	if hook, ok := (interface{}(&BlockORM{})).(BlockORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("number in (?)", keys).Delete(&BlockORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&BlockORM{})).(BlockORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type BlockORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Block, *gorm.DB) (*gorm.DB, error)
}
type BlockORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Block, *gorm.DB) error
}

// DefaultStrictUpdateBlock clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateBlock(ctx context.Context, in *Block, db *gorm.DB) (*Block, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateBlock")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &BlockORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("number=?", ormObj.Number).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(BlockORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(BlockORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BlockORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type BlockORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type BlockORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type BlockORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchBlock executes a basic gorm update call with patch behavior
func DefaultPatchBlock(ctx context.Context, in *Block, updateMask *field_mask.FieldMask, db *gorm.DB) (*Block, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Block
	var err error
	if hook, ok := interface{}(&pbObj).(BlockWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&pbObj).(BlockWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskBlock(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(BlockWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateBlock(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(BlockWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type BlockWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Block, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type BlockWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Block, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type BlockWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Block, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type BlockWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Block, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetBlock executes a bulk gorm update call with patch behavior
func DefaultPatchSetBlock(ctx context.Context, objects []*Block, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Block, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Block, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchBlock(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskBlock patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskBlock(ctx context.Context, patchee *Block, patcher *Block, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Block, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Number" {
			patchee.Number = patcher.Number
			continue
		}
		if f == prefix+"PeerId" {
			patchee.PeerId = patcher.PeerId
			continue
		}
		if f == prefix+"Signature" {
			patchee.Signature = patcher.Signature
			continue
		}
		if f == prefix+"Version" {
			patchee.Version = patcher.Version
			continue
		}
		if f == prefix+"MerkleRootHash" {
			patchee.MerkleRootHash = patcher.MerkleRootHash
			continue
		}
		if f == prefix+"Hash" {
			patchee.Hash = patcher.Hash
			continue
		}
		if f == prefix+"ParentHash" {
			patchee.ParentHash = patcher.ParentHash
			continue
		}
		if f == prefix+"Timestamp" {
			patchee.Timestamp = patcher.Timestamp
			continue
		}
		if f == prefix+"TransactionCount" {
			patchee.TransactionCount = patcher.TransactionCount
			continue
		}
		if f == prefix+"LogCount" {
			patchee.LogCount = patcher.LogCount
			continue
		}
		if f == prefix+"TransactionAmount" {
			patchee.TransactionAmount = patcher.TransactionAmount
			continue
		}
		if f == prefix+"TransactionFees" {
			patchee.TransactionFees = patcher.TransactionFees
			continue
		}
		if f == prefix+"FailedTransactionCount" {
			patchee.FailedTransactionCount = patcher.FailedTransactionCount
			continue
		}
		if f == prefix+"InternalTransactionCount" {
			patchee.InternalTransactionCount = patcher.InternalTransactionCount
			continue
		}
		if f == prefix+"InternalTransactionAmount" {
			patchee.InternalTransactionAmount = patcher.InternalTransactionAmount
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListBlock executes a gorm list call
func DefaultListBlock(ctx context.Context, db *gorm.DB) ([]*Block, error) {
	in := Block{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BlockORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &BlockORM{}, &Block{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BlockORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("number")
	ormResponse := []BlockORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BlockORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Block{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type BlockORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type BlockORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type BlockORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]BlockORM) error
}
