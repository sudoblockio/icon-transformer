// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kafka_job.proto

package models

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Represents kafka consumer status, create by k9 bash job
// CREATE TABLE kafka_jobs (
//  job_id varchar,
//  worker_group varchar,
//  topic varchar,
//  partition bigint,
//  stop_offset bigint,
//  PRIMARY KEY (job_id, worker_group, topic, partition, stop_offset));
type KafkaJob struct {
	JobId                string   `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	WorkerGroup          string   `protobuf:"bytes,2,opt,name=worker_group,json=workerGroup,proto3" json:"worker_group,omitempty"`
	Topic                string   `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	Partition            uint64   `protobuf:"varint,4,opt,name=partition,proto3" json:"partition,omitempty"`
	StopOffset           uint64   `protobuf:"varint,5,opt,name=stop_offset,json=stopOffset,proto3" json:"stop_offset,omitempty"`
}

func (m *KafkaJob) Reset()         { *m = KafkaJob{} }
func (m *KafkaJob) String() string { return proto.CompactTextString(m) }
func (*KafkaJob) ProtoMessage()    {}
func (*KafkaJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_20843d16c2610973, []int{0}
}

func (m *KafkaJob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KafkaJob.Unmarshal(m, b)
}
func (m *KafkaJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KafkaJob.Marshal(b, m, deterministic)
}
func (m *KafkaJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KafkaJob.Merge(m, src)
}
func (m *KafkaJob) XXX_Size() int {
	return xxx_messageInfo_KafkaJob.Size(m)
}
func (m *KafkaJob) XXX_DiscardUnknown() {
	xxx_messageInfo_KafkaJob.DiscardUnknown(m)
}

var xxx_messageInfo_KafkaJob proto.InternalMessageInfo

func (m *KafkaJob) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *KafkaJob) GetWorkerGroup() string {
	if m != nil {
		return m.WorkerGroup
	}
	return ""
}

func (m *KafkaJob) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *KafkaJob) GetPartition() uint64 {
	if m != nil {
		return m.Partition
	}
	return 0
}

func (m *KafkaJob) GetStopOffset() uint64 {
	if m != nil {
		return m.StopOffset
	}
	return 0
}

func init() {
	proto.RegisterType((*KafkaJob)(nil), "models.KafkaJob")
}

func init() {
	proto.RegisterFile("kafka_job.proto", fileDescriptor_20843d16c2610973)
}

var fileDescriptor_20843d16c2610973 = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xd9, 0x9a, 0x84, 0x74, 0x2a, 0x08, 0x7b, 0x4a, 0x3d, 0xd8, 0xe2, 0x41, 0x02, 0xd2,
	0xe4, 0xe0, 0xcd, 0x93, 0xf4, 0x22, 0xea, 0x41, 0xe8, 0xd1, 0x4b, 0xc8, 0x26, 0x9b, 0xb8, 0x49,
	0x93, 0x7f, 0xd9, 0x6c, 0xd1, 0x57, 0x6b, 0xdf, 0xc0, 0xb7, 0x92, 0x4d, 0x0e, 0x4a, 0x8f, 0xf3,
	0xfd, 0x1f, 0x3f, 0x33, 0x43, 0x57, 0x6d, 0x5e, 0xb5, 0x79, 0xd6, 0x40, 0x24, 0xda, 0xc0, 0x82,
	0x07, 0x1d, 0x4a, 0xb9, 0x1f, 0xae, 0x9f, 0x6a, 0x65, 0x3f, 0x0f, 0x22, 0x29, 0xd0, 0xa5, 0xaa,
	0xaf, 0x20, 0xf6, 0xf8, 0x86, 0x96, 0x7d, 0x3a, 0x6a, 0xc5, 0xa6, 0x96, 0xfd, 0xa6, 0x86, 0xe9,
	0xa6, 0x39, 0x85, 0xb6, 0x0a, 0xfd, 0x90, 0x3a, 0x34, 0x35, 0xdd, 0xfe, 0x30, 0x0a, 0xdf, 0x5c,
	0xfb, 0x2b, 0x04, 0x5f, 0x51, 0xd0, 0x40, 0x64, 0xaa, 0x8c, 0xd8, 0x9a, 0xc5, 0xf3, 0x6d, 0x78,
	0x3a, 0x2e, 0x3d, 0x9a, 0xc5, 0x6c, 0xe7, 0x37, 0x10, 0x2f, 0x25, 0xbf, 0xa7, 0xcb, 0x2f, 0x98,
	0x56, 0x9a, 0xac, 0x36, 0x38, 0xe8, 0x68, 0x76, 0xa6, 0x2d, 0xa6, 0xf4, 0xd9, 0x85, 0xfc, 0x86,
	0x7c, 0x0b, 0xad, 0x8a, 0xe8, 0xe2, 0xbc, 0x6c, 0xc4, 0xfc, 0x8e, 0xe6, 0x3a, 0x37, 0x56, 0xb9,
	0x9d, 0x22, 0x6f, 0xcd, 0x62, 0xef, 0x9f, 0xf3, 0x17, 0xf1, 0x15, 0x2d, 0x06, 0x0b, 0x9d, 0xa1,
	0xaa, 0x06, 0x69, 0x23, 0xdf, 0x99, 0x3b, 0x72, 0xe8, 0x7d, 0x24, 0x8f, 0xc1, 0xe9, 0xb8, 0x9c,
	0x85, 0x6c, 0x4b, 0x1f, 0x61, 0x92, 0x4e, 0x9f, 0x11, 0xc1, 0x78, 0xde, 0xc3, 0x6f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xfd, 0x30, 0x0c, 0xfc, 0x3b, 0x01, 0x00, 0x00,
}
