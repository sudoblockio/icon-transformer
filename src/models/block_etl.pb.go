// Code generated by protoc-gen-go. DO NOT EDIT.
// source: block_etl.proto

package models

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BlockETL struct {
	Number               int64             `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Hash                 string            `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	ParentHash           string            `protobuf:"bytes,3,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	MerkleRootHash       string            `protobuf:"bytes,4,opt,name=merkle_root_hash,json=merkleRootHash,proto3" json:"merkle_root_hash,omitempty"`
	PeerId               string            `protobuf:"bytes,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Signature            string            `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	Timestamp            int64             `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Version              string            `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
	Transactions         []*TransactionETL `protobuf:"bytes,9,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (m *BlockETL) Reset()         { *m = BlockETL{} }
func (m *BlockETL) String() string { return proto.CompactTextString(m) }
func (*BlockETL) ProtoMessage()    {}
func (*BlockETL) Descriptor() ([]byte, []int) {
	return fileDescriptor_7eeb5101d09c56fb, []int{0}
}

func (m *BlockETL) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockETL.Unmarshal(m, b)
}
func (m *BlockETL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockETL.Marshal(b, m, deterministic)
}
func (m *BlockETL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockETL.Merge(m, src)
}
func (m *BlockETL) XXX_Size() int {
	return xxx_messageInfo_BlockETL.Size(m)
}
func (m *BlockETL) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockETL.DiscardUnknown(m)
}

var xxx_messageInfo_BlockETL proto.InternalMessageInfo

func (m *BlockETL) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *BlockETL) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BlockETL) GetParentHash() string {
	if m != nil {
		return m.ParentHash
	}
	return ""
}

func (m *BlockETL) GetMerkleRootHash() string {
	if m != nil {
		return m.MerkleRootHash
	}
	return ""
}

func (m *BlockETL) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (m *BlockETL) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *BlockETL) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BlockETL) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *BlockETL) GetTransactions() []*TransactionETL {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type TransactionETL struct {
	Hash                 string    `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Timestamp            int64     `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TransactionIndex     int64     `protobuf:"varint,3,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"`
	Nonce                string    `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Nid                  string    `protobuf:"bytes,5,opt,name=nid,proto3" json:"nid,omitempty"`
	FromAddress          string    `protobuf:"bytes,6,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ToAddress            string    `protobuf:"bytes,7,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	Value                string    `protobuf:"bytes,8,opt,name=value,proto3" json:"value,omitempty"`
	Status               string    `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	StepPrice            string    `protobuf:"bytes,10,opt,name=step_price,json=stepPrice,proto3" json:"step_price,omitempty"`
	StepUsed             string    `protobuf:"bytes,11,opt,name=step_used,json=stepUsed,proto3" json:"step_used,omitempty"`
	StepLimit            string    `protobuf:"bytes,12,opt,name=step_limit,json=stepLimit,proto3" json:"step_limit,omitempty"`
	CumulativeStepUsed   string    `protobuf:"bytes,13,opt,name=cumulative_step_used,json=cumulativeStepUsed,proto3" json:"cumulative_step_used,omitempty"`
	LogsBloom            string    `protobuf:"bytes,14,opt,name=logs_bloom,json=logsBloom,proto3" json:"logs_bloom,omitempty"`
	Data                 string    `protobuf:"bytes,15,opt,name=data,proto3" json:"data,omitempty"`
	DataType             string    `protobuf:"bytes,16,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	ScoreAddress         string    `protobuf:"bytes,17,opt,name=score_address,json=scoreAddress,proto3" json:"score_address,omitempty"`
	Signature            string    `protobuf:"bytes,18,opt,name=signature,proto3" json:"signature,omitempty"`
	Version              string    `protobuf:"bytes,19,opt,name=version,proto3" json:"version,omitempty"`
	Logs                 []*LogETL `protobuf:"bytes,20,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (m *TransactionETL) Reset()         { *m = TransactionETL{} }
func (m *TransactionETL) String() string { return proto.CompactTextString(m) }
func (*TransactionETL) ProtoMessage()    {}
func (*TransactionETL) Descriptor() ([]byte, []int) {
	return fileDescriptor_7eeb5101d09c56fb, []int{1}
}

func (m *TransactionETL) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionETL.Unmarshal(m, b)
}
func (m *TransactionETL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionETL.Marshal(b, m, deterministic)
}
func (m *TransactionETL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionETL.Merge(m, src)
}
func (m *TransactionETL) XXX_Size() int {
	return xxx_messageInfo_TransactionETL.Size(m)
}
func (m *TransactionETL) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionETL.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionETL proto.InternalMessageInfo

func (m *TransactionETL) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *TransactionETL) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TransactionETL) GetTransactionIndex() int64 {
	if m != nil {
		return m.TransactionIndex
	}
	return 0
}

func (m *TransactionETL) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *TransactionETL) GetNid() string {
	if m != nil {
		return m.Nid
	}
	return ""
}

func (m *TransactionETL) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *TransactionETL) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *TransactionETL) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *TransactionETL) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *TransactionETL) GetStepPrice() string {
	if m != nil {
		return m.StepPrice
	}
	return ""
}

func (m *TransactionETL) GetStepUsed() string {
	if m != nil {
		return m.StepUsed
	}
	return ""
}

func (m *TransactionETL) GetStepLimit() string {
	if m != nil {
		return m.StepLimit
	}
	return ""
}

func (m *TransactionETL) GetCumulativeStepUsed() string {
	if m != nil {
		return m.CumulativeStepUsed
	}
	return ""
}

func (m *TransactionETL) GetLogsBloom() string {
	if m != nil {
		return m.LogsBloom
	}
	return ""
}

func (m *TransactionETL) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *TransactionETL) GetDataType() string {
	if m != nil {
		return m.DataType
	}
	return ""
}

func (m *TransactionETL) GetScoreAddress() string {
	if m != nil {
		return m.ScoreAddress
	}
	return ""
}

func (m *TransactionETL) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *TransactionETL) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *TransactionETL) GetLogs() []*LogETL {
	if m != nil {
		return m.Logs
	}
	return nil
}

type LogETL struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Indexed              []string `protobuf:"bytes,2,rep,name=indexed,proto3" json:"indexed,omitempty"`
	Data                 []string `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *LogETL) Reset()         { *m = LogETL{} }
func (m *LogETL) String() string { return proto.CompactTextString(m) }
func (*LogETL) ProtoMessage()    {}
func (*LogETL) Descriptor() ([]byte, []int) {
	return fileDescriptor_7eeb5101d09c56fb, []int{2}
}

func (m *LogETL) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogETL.Unmarshal(m, b)
}
func (m *LogETL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogETL.Marshal(b, m, deterministic)
}
func (m *LogETL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogETL.Merge(m, src)
}
func (m *LogETL) XXX_Size() int {
	return xxx_messageInfo_LogETL.Size(m)
}
func (m *LogETL) XXX_DiscardUnknown() {
	xxx_messageInfo_LogETL.DiscardUnknown(m)
}

var xxx_messageInfo_LogETL proto.InternalMessageInfo

func (m *LogETL) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *LogETL) GetIndexed() []string {
	if m != nil {
		return m.Indexed
	}
	return nil
}

func (m *LogETL) GetData() []string {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*BlockETL)(nil), "models.BlockETL")
	proto.RegisterType((*TransactionETL)(nil), "models.TransactionETL")
	proto.RegisterType((*LogETL)(nil), "models.LogETL")
}

func init() {
	proto.RegisterFile("block_etl.proto", fileDescriptor_7eeb5101d09c56fb)
}

var fileDescriptor_7eeb5101d09c56fb = []byte{
	// 667 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x5d, 0x6f, 0xda, 0x30,
	0x14, 0x1d, 0x04, 0x02, 0x5c, 0x28, 0xa5, 0x1e, 0xaa, 0xac, 0x7d, 0xc1, 0x18, 0x9a, 0xd0, 0x26,
	0x3e, 0xb6, 0x75, 0x95, 0xb6, 0x87, 0x49, 0x43, 0xaa, 0xb4, 0x4a, 0x3c, 0x4c, 0x19, 0x7b, 0xd9,
	0xd4, 0x46, 0x26, 0x71, 0x21, 0x6a, 0x12, 0x47, 0xb1, 0x43, 0x5b, 0x4d, 0xfd, 0x19, 0xdb, 0xdf,
	0x43, 0xe2, 0x97, 0x4c, 0x76, 0x12, 0x20, 0xd5, 0xd6, 0x27, 0x7c, 0xcf, 0x3d, 0xe7, 0xfa, 0x72,
	0x7c, 0x00, 0xf6, 0x67, 0x2e, 0xb3, 0x2e, 0x4d, 0x2a, 0xdc, 0x41, 0x10, 0x32, 0xc1, 0x90, 0xee,
	0x31, 0x9b, 0xba, 0xfc, 0xd1, 0xf1, 0xdc, 0x11, 0x8b, 0x68, 0x36, 0xb0, 0x98, 0x37, 0xf4, 0xae,
	0x1c, 0x71, 0xc9, 0xae, 0x86, 0x73, 0xd6, 0x57, 0xa4, 0xfe, 0x92, 0xb8, 0x8e, 0x4d, 0x04, 0x0b,
	0xf9, 0x70, 0x73, 0x8c, 0xf5, 0x9d, 0x3f, 0x1a, 0x94, 0xc7, 0x72, 0xe6, 0xc9, 0x74, 0x82, 0x9e,
	0x81, 0xee, 0x47, 0xde, 0x8c, 0x86, 0x38, 0xd7, 0xce, 0xf5, 0xb4, 0xb1, 0xbe, 0x5e, 0xb5, 0xf2,
	0x8d, 0x07, 0x46, 0x82, 0xa2, 0x1e, 0x14, 0x16, 0x84, 0x2f, 0x70, 0xbe, 0x9d, 0xeb, 0x55, 0xc6,
	0xcd, 0xf5, 0xaa, 0xd5, 0x80, 0xfa, 0xf9, 0x4f, 0xd2, 0xbf, 0x18, 0xf5, 0x3f, 0x9c, 0xfd, 0x3a,
	0x3e, 0xba, 0xed, 0x1a, 0x8a, 0x81, 0xde, 0x43, 0x35, 0x20, 0x21, 0xf5, 0x85, 0xa9, 0x04, 0xda,
	0x3d, 0x02, 0x88, 0x89, 0x5f, 0xa4, 0xec, 0x13, 0x34, 0x3c, 0x1a, 0x5e, 0xba, 0xd4, 0x0c, 0x19,
	0x4b, 0xb4, 0x85, 0x7b, 0xb4, 0xf5, 0x98, 0x6d, 0x30, 0x16, 0xeb, 0x87, 0x50, 0x0a, 0x28, 0x0d,
	0x4d, 0xc7, 0xc6, 0x45, 0x25, 0x3b, 0x5c, 0xaf, 0x5a, 0x08, 0x1a, 0xe7, 0x8b, 0xeb, 0x8d, 0xf0,
	0x68, 0x74, 0xdb, 0x35, 0x74, 0x49, 0x3b, 0xb5, 0xd1, 0x13, 0xa8, 0x70, 0x67, 0xee, 0x13, 0x11,
	0x85, 0x14, 0xeb, 0x52, 0x62, 0x6c, 0x01, 0xd4, 0x85, 0x8a, 0x70, 0x3c, 0xca, 0x05, 0xf1, 0x02,
	0x5c, 0xca, 0x58, 0xb2, 0x6d, 0x20, 0x0c, 0xa5, 0x25, 0x0d, 0xb9, 0xc3, 0x7c, 0x5c, 0x56, 0x13,
	0xd2, 0x12, 0x7d, 0x84, 0x9a, 0x08, 0x89, 0xcf, 0x89, 0x25, 0x1c, 0xe6, 0x73, 0x5c, 0x69, 0x6b,
	0xbd, 0xea, 0xdb, 0xc3, 0x41, 0xfc, 0x66, 0x83, 0xe9, 0xb6, 0x77, 0x32, 0x9d, 0x18, 0x19, 0x6e,
	0xe7, 0x77, 0x11, 0xea, 0x59, 0x02, 0x7a, 0x95, 0xd8, 0x9f, 0xcb, 0x7c, 0xb5, 0xd1, 0xf5, 0xbf,
	0x1e, 0x20, 0xb3, 0x7a, 0xfe, 0x7f, 0xab, 0xbf, 0x86, 0x83, 0x9d, 0x4b, 0x4d, 0xc7, 0xb7, 0xe9,
	0xb5, 0x7a, 0x2c, 0xcd, 0x68, 0xec, 0x34, 0x4e, 0x25, 0x8e, 0x9a, 0x50, 0xf4, 0x99, 0x6f, 0xd1,
	0xf8, 0x45, 0x8c, 0xb8, 0x40, 0x0d, 0xd0, 0xfc, 0xd4, 0x6e, 0x43, 0x1e, 0xd1, 0x73, 0xa8, 0x5d,
	0x84, 0xcc, 0x33, 0x89, 0x6d, 0x87, 0x94, 0xf3, 0xc4, 0xd6, 0xaa, 0xc4, 0x3e, 0xc7, 0x10, 0x7a,
	0x0a, 0x20, 0xd8, 0x86, 0x50, 0x8a, 0x7d, 0x17, 0x2c, 0x6d, 0x37, 0xa1, 0xb8, 0x24, 0x6e, 0x44,
	0x13, 0x3f, 0xe3, 0x02, 0xbd, 0x04, 0x9d, 0x0b, 0x22, 0x22, 0xe9, 0xa3, 0x34, 0xa0, 0xbe, 0x5e,
	0xb5, 0x00, 0xca, 0xd2, 0x80, 0xd1, 0x9b, 0xb3, 0xae, 0x91, 0x74, 0xe5, 0x70, 0x2e, 0x68, 0x60,
	0x06, 0xa1, 0x63, 0x51, 0x0c, 0xc9, 0xa3, 0x0a, 0x1a, 0x7c, 0x95, 0x00, 0x7a, 0x0c, 0xaa, 0x30,
	0x23, 0x4e, 0x6d, 0x5c, 0x55, 0xdd, 0xb2, 0x04, 0xbe, 0x73, 0x6a, 0x6f, 0xb4, 0xae, 0xe3, 0x39,
	0x02, 0xd7, 0xb6, 0xda, 0x89, 0x04, 0xd0, 0x08, 0x9a, 0x56, 0xe4, 0x45, 0x2e, 0x11, 0xce, 0x92,
	0x9a, 0xdb, 0x31, 0x7b, 0x8a, 0x88, 0xb6, 0xbd, 0x6f, 0x3b, 0x03, 0x5d, 0x36, 0xe7, 0xe6, 0xcc,
	0x65, 0xcc, 0xc3, 0xf5, 0x78, 0xa0, 0x44, 0xc6, 0x12, 0x40, 0x08, 0x0a, 0x36, 0x11, 0x04, 0xef,
	0xab, 0x86, 0x3a, 0xcb, 0x05, 0xe5, 0xa7, 0x29, 0x6e, 0x02, 0x8a, 0x1b, 0xf1, 0x82, 0x12, 0x98,
	0xde, 0x04, 0x14, 0xbd, 0x80, 0x3d, 0x6e, 0xb1, 0x90, 0x6e, 0xcc, 0x3b, 0x50, 0x84, 0x9a, 0x02,
	0x53, 0xff, 0x32, 0xa9, 0x46, 0x77, 0x53, 0xbd, 0x93, 0xd7, 0x87, 0xd9, 0xbc, 0x76, 0xa0, 0x20,
	0x57, 0xc3, 0x4d, 0x95, 0xd3, 0x7a, 0x9a, 0xd3, 0x09, 0x9b, 0xcb, 0x7c, 0xaa, 0x5e, 0x67, 0x01,
	0x7a, 0x5c, 0xa3, 0x11, 0x94, 0xd2, 0x25, 0xb2, 0x89, 0xb4, 0xee, 0xfc, 0xd8, 0x52, 0x9a, 0xbc,
	0x59, 0x45, 0x8c, 0xda, 0x38, 0xdf, 0xd6, 0xe4, 0xcd, 0x49, 0xb9, 0xf1, 0x41, 0x53, 0xb0, 0x3a,
	0x8f, 0xe1, 0x47, 0x79, 0x30, 0x8c, 0x57, 0x98, 0xe9, 0xea, 0xdf, 0xea, 0xdd, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x5b, 0x14, 0x56, 0x85, 0x00, 0x05, 0x00, 0x00,
}
