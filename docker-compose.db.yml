version: "3.7"

x-extractor-env: &extractor-env
  # General
  NAME: "icon-extractor"
  NETWORK_NAME: "mainnet"

  # Extractors
  START_CLAIM_EXTRACTORS: "true"
  START_HEAD_EXTRACTOR: "false"
#  NUM_CLAIM_EXTRACTORS: "4"
#  MAX_CLAIM_SIZE: "1000"
#  START_HEAD_EXTRACTOR: "true"
#  HEAD_EXTRACTOR_START_BLOCK: "7588343"
#  HEAD_EXTRACTOR_START_BLOCK: "32136537"
#  HEAD_EXTRACTOR_START_BLOCK: "36980296"
  ICON_NODE_SERVICE_MAX_BATCH_SIZE: "1"

#  ICON_NODE_SERVICE_URL: "https://api.berlin.icon.community/api/v3"

  # Logging
  LOG_LEVEL: "DEBUG"
  LOG_TO_FILE: "false"
  LOG_FILE_NAME: ""
  LOG_FORMAT: "console"
  LOG_IS_DEVELOPMENT: "true"

  # Kakfa
  KAFKA_BROKER_URL: "kafka:9092"
  KAFKA_BLOCKS_TOPIC: "icon-blocks"
  KAFKA_PRODUCER_PARTITIONS: 1

  # DB
  DB_DRIVER: "postgres"
  DB_HOST: "postgres"
  DB_PORT: "5432"
  DB_USER: "postgres"
  DB_PASSWORD: "changeme"
  DB_DBNAME: "postgres"
  DB_SSL_MODE: "disable"
  DB_TIMEZONE: "UTC"

x-contracts-worker-env: &contracts-worker-env
  NAME: "contracts"
  NETWORK_NAME: "mainnet"

  # Ports
  PORT: "8000"
  HEALTH_PORT: "8000"
  METRICS_PORT: "9400"

  # Prefix
  REST_PREFIX: "/api/v1"
  HEALTH_PREFIX: "/health"
  METRICS_PREFIX: "/metrics"

  CORS_ALLOW_ORIGINS: "*"

  # Monitoring
  HEALTH_POLLING_INTERVAL: "60"

  # Logging
  LOG_LEVEL: "INFO"
  LOG_TO_FILE: "false"
  LOG_FILE_NAME: "contracts.log"
  LOG_FORMAT: "string"

  # Kafka
  KAFKA_BROKER_URL: "kafka:9092"
  CONSUMER_GROUP: "contracts-consumer-group"
  CONSUMER_TOPIC_BLOCKS: "icon-blocks"
  PRODUCER_TOPIC_CONTRACTS: "icon-contracts"

  # DB
  POSTGRES_USER: "postgres"
  POSTGRES_PASSWORD: "changeme"
  POSTGRES_SERVER: "postgres"
  POSTGRES_PORT: "5432"
  POSTGRES_DATABASE: "postgres"

  # Endpoints
  MAX_PAGE_SIZE: "100"

  # Application features
  ENABLE_CONTRACT_VERIFICATION: "false"

services:
  extractor:
    image: sudoblock/icon-extractor:latest
    ports:
      - "8000:8000"
#    expose:
#      - 8000
    restart: always
    environment:
      <<: *extractor-env

  contracts-worker:
    image: sudoblock/icon-contracts-worker:latest
    restart: always
    environment:
      <<: *contracts-worker-env

  ############
  # Database #
  ############
  postgres:
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    ports:
      - "5432:5432"

  #########
  # Kafka #
  #########
  zookeeper:
    image: confluentinc/cp-zookeeper:${CP_ZOOKEEPER_TAG:-latest}
    hostname: zookeeper
    environment:
      zk_id: "1"
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
#    image: confluentinc/cp-kafka:7.1.2
    image: confluentinc/cp-server:latest
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_BROKER_RACK: "r1"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_SCHEMA_REGISTRY_URL: "schemaregistry:8081"
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: "schemaregistry:8081"
      KAFKA_JMX_PORT: 9991
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CONFLUENT_METRICS_ENABLE: 'false'
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      KAFKA_MESSAGE_MAX_BYTES: "67109632"
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1

  #########
  # Redis #
  #########
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
